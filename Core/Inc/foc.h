// Copyright 2018 Josh Pieper, jjp@pobox.com.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef __FOC_H
#define __FOC_H

#include <math.h>
#include "custom_math.h"

float SinTable[512] = {
  0.0000000f,
  0.0122715f,
  0.0245412f,
  0.0368072f,
  0.0490677f,
  0.0613207f,
  0.0735646f,
  0.0857973f,
  0.0980171f,
  0.1102222f,
  0.1224107f,
  0.1345807f,
  0.1467305f,
  0.1588581f,
  0.1709619f,
  0.1830399f,
  0.1950903f,
  0.2071114f,
  0.2191012f,
  0.2310581f,
  0.2429802f,
  0.2548657f,
  0.2667128f,
  0.2785197f,
  0.2902847f,
  0.3020059f,
  0.3136817f,
  0.3253103f,
  0.3368899f,
  0.3484187f,
  0.3598950f,
  0.3713172f,
  0.3826834f,
  0.3939920f,
  0.4052413f,
  0.4164296f,
  0.4275551f,
  0.4386162f,
  0.4496113f,
  0.4605387f,
  0.4713967f,
  0.4821838f,
  0.4928982f,
  0.5035384f,
  0.5141027f,
  0.5245897f,
  0.5349976f,
  0.5453250f,
  0.5555702f,
  0.5657318f,
  0.5758082f,
  0.5857979f,
  0.5956993f,
  0.6055110f,
  0.6152316f,
  0.6248595f,
  0.6343933f,
  0.6438315f,
  0.6531728f,
  0.6624158f,
  0.6715590f,
  0.6806010f,
  0.6895405f,
  0.6983762f,
  0.7071068f,
  0.7157308f,
  0.7242471f,
  0.7326543f,
  0.7409511f,
  0.7491364f,
  0.7572088f,
  0.7651673f,
  0.7730105f,
  0.7807372f,
  0.7883464f,
  0.7958369f,
  0.8032075f,
  0.8104572f,
  0.8175848f,
  0.8245893f,
  0.8314696f,
  0.8382247f,
  0.8448536f,
  0.8513552f,
  0.8577286f,
  0.8639729f,
  0.8700870f,
  0.8760701f,
  0.8819213f,
  0.8876396f,
  0.8932243f,
  0.8986745f,
  0.9039893f,
  0.9091680f,
  0.9142098f,
  0.9191139f,
  0.9238795f,
  0.9285061f,
  0.9329928f,
  0.9373390f,
  0.9415441f,
  0.9456073f,
  0.9495282f,
  0.9533060f,
  0.9569403f,
  0.9604305f,
  0.9637761f,
  0.9669765f,
  0.9700313f,
  0.9729400f,
  0.9757021f,
  0.9783174f,
  0.9807853f,
  0.9831055f,
  0.9852776f,
  0.9873014f,
  0.9891765f,
  0.9909026f,
  0.9924795f,
  0.9939070f,
  0.9951847f,
  0.9963126f,
  0.9972905f,
  0.9981181f,
  0.9987955f,
  0.9993224f,
  0.9996988f,
  0.9999247f,
  1.0000000f,
  0.9999247f,
  0.9996988f,
  0.9993224f,
  0.9987955f,
  0.9981181f,
  0.9972905f,
  0.9963126f,
  0.9951847f,
  0.9939070f,
  0.9924795f,
  0.9909026f,
  0.9891765f,
  0.9873014f,
  0.9852776f,
  0.9831055f,
  0.9807853f,
  0.9783174f,
  0.9757021f,
  0.9729400f,
  0.9700313f,
  0.9669765f,
  0.9637761f,
  0.9604305f,
  0.9569403f,
  0.9533060f,
  0.9495282f,
  0.9456073f,
  0.9415441f,
  0.9373390f,
  0.9329928f,
  0.9285061f,
  0.9238795f,
  0.9191139f,
  0.9142098f,
  0.9091680f,
  0.9039893f,
  0.8986745f,
  0.8932243f,
  0.8876396f,
  0.8819213f,
  0.8760701f,
  0.8700870f,
  0.8639729f,
  0.8577286f,
  0.8513552f,
  0.8448536f,
  0.8382247f,
  0.8314696f,
  0.8245893f,
  0.8175848f,
  0.8104572f,
  0.8032075f,
  0.7958369f,
  0.7883464f,
  0.7807372f,
  0.7730105f,
  0.7651673f,
  0.7572088f,
  0.7491364f,
  0.7409511f,
  0.7326543f,
  0.7242471f,
  0.7157308f,
  0.7071068f,
  0.6983762f,
  0.6895405f,
  0.6806010f,
  0.6715590f,
  0.6624158f,
  0.6531728f,
  0.6438315f,
  0.6343933f,
  0.6248595f,
  0.6152316f,
  0.6055110f,
  0.5956993f,
  0.5857979f,
  0.5758082f,
  0.5657318f,
  0.5555702f,
  0.5453250f,
  0.5349976f,
  0.5245897f,
  0.5141027f,
  0.5035384f,
  0.4928982f,
  0.4821838f,
  0.4713967f,
  0.4605387f,
  0.4496113f,
  0.4386162f,
  0.4275551f,
  0.4164296f,
  0.4052413f,
  0.3939920f,
  0.3826834f,
  0.3713172f,
  0.3598950f,
  0.3484187f,
  0.3368899f,
  0.3253103f,
  0.3136817f,
  0.3020059f,
  0.2902847f,
  0.2785197f,
  0.2667128f,
  0.2548657f,
  0.2429802f,
  0.2310581f,
  0.2191012f,
  0.2071114f,
  0.1950903f,
  0.1830399f,
  0.1709619f,
  0.1588581f,
  0.1467305f,
  0.1345807f,
  0.1224107f,
  0.1102222f,
  0.0980171f,
  0.0857973f,
  0.0735646f,
  0.0613207f,
  0.0490677f,
  0.0368072f,
  0.0245412f,
  0.0122715f,
  0.0000000f,
  -0.0122715f,
  -0.0245412f,
  -0.0368072f,
  -0.0490677f,
  -0.0613207f,
  -0.0735646f,
  -0.0857973f,
  -0.0980171f,
  -0.1102222f,
  -0.1224107f,
  -0.1345807f,
  -0.1467305f,
  -0.1588581f,
  -0.1709619f,
  -0.1830399f,
  -0.1950903f,
  -0.2071114f,
  -0.2191012f,
  -0.2310581f,
  -0.2429802f,
  -0.2548657f,
  -0.2667128f,
  -0.2785197f,
  -0.2902847f,
  -0.3020059f,
  -0.3136817f,
  -0.3253103f,
  -0.3368899f,
  -0.3484187f,
  -0.3598950f,
  -0.3713172f,
  -0.3826834f,
  -0.3939920f,
  -0.4052413f,
  -0.4164296f,
  -0.4275551f,
  -0.4386162f,
  -0.4496113f,
  -0.4605387f,
  -0.4713967f,
  -0.4821838f,
  -0.4928982f,
  -0.5035384f,
  -0.5141027f,
  -0.5245897f,
  -0.5349976f,
  -0.5453250f,
  -0.5555702f,
  -0.5657318f,
  -0.5758082f,
  -0.5857979f,
  -0.5956993f,
  -0.6055110f,
  -0.6152316f,
  -0.6248595f,
  -0.6343933f,
  -0.6438315f,
  -0.6531728f,
  -0.6624158f,
  -0.6715590f,
  -0.6806010f,
  -0.6895405f,
  -0.6983762f,
  -0.7071068f,
  -0.7157308f,
  -0.7242471f,
  -0.7326543f,
  -0.7409511f,
  -0.7491364f,
  -0.7572088f,
  -0.7651673f,
  -0.7730105f,
  -0.7807372f,
  -0.7883464f,
  -0.7958369f,
  -0.8032075f,
  -0.8104572f,
  -0.8175848f,
  -0.8245893f,
  -0.8314696f,
  -0.8382247f,
  -0.8448536f,
  -0.8513552f,
  -0.8577286f,
  -0.8639729f,
  -0.8700870f,
  -0.8760701f,
  -0.8819213f,
  -0.8876396f,
  -0.8932243f,
  -0.8986745f,
  -0.9039893f,
  -0.9091680f,
  -0.9142098f,
  -0.9191139f,
  -0.9238795f,
  -0.9285061f,
  -0.9329928f,
  -0.9373390f,
  -0.9415441f,
  -0.9456073f,
  -0.9495282f,
  -0.9533060f,
  -0.9569403f,
  -0.9604305f,
  -0.9637761f,
  -0.9669765f,
  -0.9700313f,
  -0.9729400f,
  -0.9757021f,
  -0.9783174f,
  -0.9807853f,
  -0.9831055f,
  -0.9852776f,
  -0.9873014f,
  -0.9891765f,
  -0.9909026f,
  -0.9924795f,
  -0.9939070f,
  -0.9951847f,
  -0.9963126f,
  -0.9972905f,
  -0.9981181f,
  -0.9987955f,
  -0.9993224f,
  -0.9996988f,
  -0.9999247f,
  -1.0000000f,
  -0.9999247f,
  -0.9996988f,
  -0.9993224f,
  -0.9987955f,
  -0.9981181f,
  -0.9972905f,
  -0.9963126f,
  -0.9951847f,
  -0.9939070f,
  -0.9924795f,
  -0.9909026f,
  -0.9891765f,
  -0.9873014f,
  -0.9852776f,
  -0.9831055f,
  -0.9807853f,
  -0.9783174f,
  -0.9757021f,
  -0.9729400f,
  -0.9700313f,
  -0.9669765f,
  -0.9637761f,
  -0.9604305f,
  -0.9569403f,
  -0.9533060f,
  -0.9495282f,
  -0.9456073f,
  -0.9415441f,
  -0.9373390f,
  -0.9329928f,
  -0.9285061f,
  -0.9238795f,
  -0.9191139f,
  -0.9142098f,
  -0.9091680f,
  -0.9039893f,
  -0.8986745f,
  -0.8932243f,
  -0.8876396f,
  -0.8819213f,
  -0.8760701f,
  -0.8700870f,
  -0.8639729f,
  -0.8577286f,
  -0.8513552f,
  -0.8448536f,
  -0.8382247f,
  -0.8314696f,
  -0.8245893f,
  -0.8175848f,
  -0.8104572f,
  -0.8032075f,
  -0.7958369f,
  -0.7883464f,
  -0.7807372f,
  -0.7730105f,
  -0.7651673f,
  -0.7572088f,
  -0.7491364f,
  -0.7409511f,
  -0.7326543f,
  -0.7242471f,
  -0.7157308f,
  -0.7071068f,
  -0.6983762f,
  -0.6895405f,
  -0.6806010f,
  -0.6715590f,
  -0.6624158f,
  -0.6531728f,
  -0.6438315f,
  -0.6343933f,
  -0.6248595f,
  -0.6152316f,
  -0.6055110f,
  -0.5956993f,
  -0.5857979f,
  -0.5758082f,
  -0.5657318f,
  -0.5555702f,
  -0.5453250f,
  -0.5349976f,
  -0.5245897f,
  -0.5141027f,
  -0.5035384f,
  -0.4928982f,
  -0.4821838f,
  -0.4713967f,
  -0.4605387f,
  -0.4496113f,
  -0.4386162f,
  -0.4275551f,
  -0.4164296f,
  -0.4052413f,
  -0.3939920f,
  -0.3826834f,
  -0.3713172f,
  -0.3598950f,
  -0.3484187f,
  -0.3368899f,
  -0.3253103f,
  -0.3136817f,
  -0.3020059f,
  -0.2902847f,
  -0.2785197f,
  -0.2667128f,
  -0.2548657f,
  -0.2429802f,
  -0.2310581f,
  -0.2191012f,
  -0.2071114f,
  -0.1950903f,
  -0.1830399f,
  -0.1709619f,
  -0.1588581f,
  -0.1467305f,
  -0.1345807f,
  -0.1224107f,
  -0.1102222f,
  -0.0980171f,
  -0.0857973f,
  -0.0735646f,
  -0.0613207f,
  -0.0490677f,
  -0.0368072f,
  -0.0245412f,
  -0.0122715f,
};

// A helper to cache the result of sin and cos on a given quantity.
typedef struct SinCosResult {
  float s;
  float c;
} SinCosResult;

// @p theta must be >= 0.0 and <= 2 * pi
void SinCos(float theta, SinCosResult* result) {
    int sin_index = max(0, min(511, (int)((512.0f / k2Pi) * theta)));
    int cos_index = ((128 - sin_index) + 512) % 512;

    result->s = SinTable[sin_index];
    result->c = SinTable[cos_index];
}

typedef struct DqTransformResult {
  float d;
  float q;
} DqTransformResult;

void DqTransform(SinCosResult* sc, float a, float b, float c, DqTransformResult* result) {
  result->d = (2.0f / 3.0f) * (a * sc->c + (kSqrt3_4 * sc->s - 0.5f * sc->c) * b + (-kSqrt3_4 * sc->s - 0.5f * sc->c) * c);
  result->q = (2.0f / 3.0f) * (-sc->s * a - (-kSqrt3_4 * sc->c - 0.5f * sc->s) * b - (kSqrt3_4 * sc->c - 0.5f * sc->s) * c);
}

typedef struct InverseDqTransformResult {
  float a;
  float b;
  float c;
} InverseDqTransformResult;

void InverseDqTransform(SinCosResult* sc, float d, float q, InverseDqTransformResult* result) {
  result->a = sc->c * d - sc->s * q;
  result->b = (kSqrt3_4 * sc->s - 0.5f * sc->c) * d - (-kSqrt3_4 * sc->c - 0.5f * sc->s) * q;
  result->c = (-kSqrt3_4 * sc->s - 0.5f * sc->c) * d - (kSqrt3_4 * sc->c - 0.5f * sc->s) * q;
}

#endif
